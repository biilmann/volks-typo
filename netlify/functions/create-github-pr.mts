import type { Context } from '@netlify/functions';
import { Octokit } from '@octokit/rest';
import { getStore } from '@netlify/blobs';
import { verifyAuth } from '../lib/auth.mts';
import { GITHUB_CONFIG, SITE_CONFIG } from '../lib/config.mts';

export default async (request: Request, context: Context) => {
  const auth = verifyAuth(request);
  if (!auth) {
    return new Response('Unauthorized', { status: 401 });
  }

  const { documentId } = await request.json();
  const drafts = getStore('drafts');
  
  try {
    const documentData = await drafts.get(documentId);
    if (!documentData) {
      return new Response('Document not found', { status: 404 });
    }

    const document = JSON.parse(documentData);
    const octokit = new Octokit({ auth: auth.github_token });

    const slug = document.meta.title
      .toLowerCase()
      .replace(/[^a-z0-9]+/g, '-')
      .replace(/^-+|-+$/g, '');

    const timestamp = Date.now();
    const branchName = `${GITHUB_CONFIG.branchPrefix}${slug}-${timestamp}`;
    
    const { data: ref } = await octokit.rest.git.getRef({
      owner: GITHUB_CONFIG.owner,
      repo: GITHUB_CONFIG.repo,
      ref: `heads/${GITHUB_CONFIG.defaultBranch}`,
    });

    await octokit.rest.git.createRef({
      owner: GITHUB_CONFIG.owner,
      repo: GITHUB_CONFIG.repo,
      ref: `refs/heads/${branchName}`,
      sha: ref.object.sha,
    });

    // ADJUST THIS FRONTMATTER FOR YOUR SITE
    const frontmatter = `---
title: "${document.meta.title}"
author: "${document.meta.author}"
publishDate: "${document.meta.publishDate}"
description: "${document.meta.description}"
---

`;

    const fileContent = frontmatter + document.markdown;
    const fileName = `${slug}.md`;
    const filePath = `${SITE_CONFIG.contentDir}/${fileName}`;

    await octokit.rest.repos.createOrUpdateFileContents({
      owner: GITHUB_CONFIG.owner,
      repo: GITHUB_CONFIG.repo,
      path: filePath,
      message: `Add article: ${document.meta.title}`,
      content: btoa(fileContent),
      branch: branchName,
    });

    const { data: pr } = await octokit.rest.pulls.create({
      owner: GITHUB_CONFIG.owner,
      repo: GITHUB_CONFIG.repo,
      title: `Add article: ${document.meta.title}`,
      head: branchName,
      base: GITHUB_CONFIG.defaultBranch,
      body: `## Add Blog Article

**Title:** ${document.meta.title}
**Author:** ${document.meta.author}
**Description:** ${document.meta.description}

### Files Added
- \`${filePath}\`

Generated by Document Publisher`,
    });

    return Response.json({ prUrl: pr.html_url, prNumber: pr.number });

  } catch (error) {
    console.error('PR creation error:', error);
    return new Response('PR creation failed', { status: 500 });
  }
};