---
---
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Publish Document</title>
  <style>
    body { margin: 0; font-family: sans-serif; background: #f5f5f5; }
    .container { max-width: 800px; margin: 2rem auto; padding: 1rem; }
    .search-input { width: 100%; padding: 0.5rem; border: 1px solid #ccc; border-radius: 4px; margin-bottom: 1rem; }
    .doc { background: #fff; padding: 1rem; border-radius: 4px; margin-bottom: 0.5rem; box-shadow: 0 1px 4px rgba(0,0,0,0.1); }
    .doc h3 { margin: 0; }
    .doc p { margin: 0.5rem 0; color: #555; }
    .btn { padding: 0.4rem 0.8rem; background: #0070f3; color: #fff; border: none; border-radius: 4px; cursor: pointer; transition: background 0.2s; }
    .btn:hover { background: #005bb5; }
    .overlay { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); display: flex; align-items: center; justify-content: center; }
    .overlay.hidden { display: none; }
    .overlay-content { background: #fff; padding: 2rem; border-radius: 8px; text-align: center; width: 300px; }
    .progress-bar { width: 100%; height: 10px; background: #eee; border-radius: 5px; overflow: hidden; margin-bottom: 1rem; }
    .progress { height: 100%; width: 0; background: #0070f3; transition: width 0.3s; }
  </style>
</head>
<body>
  <div class="container">
    <input id="search" type="text" placeholder="Search Notion documents..." class="search-input" />
    <div id="results"></div>
  </div>
  <div id="overlay" class="overlay hidden">
    <div class="overlay-content">
      <div class="progress-bar"><div id="progress" class="progress"></div></div>
      <p id="statusMessage">Starting...</p>
    </div>
  </div>
  <script>
    async function checkAuth() {
      try {
        const res = await fetch('/api/notion?s=test');
        if (res.status === 401) window.location.href = '/admin/login';
      } catch {
        window.location.href = '/admin/login';
      }
    }
    document.addEventListener('DOMContentLoaded', async () => {
      await checkAuth();
      const searchInput = document.getElementById('search');
      const resultsEl = document.getElementById('results');
      const overlay = document.getElementById('overlay');
      const progress = document.getElementById('progress');
      const statusMessage = document.getElementById('statusMessage');
      let timer;
      searchInput.addEventListener('input', () => {
        clearTimeout(timer);
        if (!searchInput.value.trim()) {
          resultsEl.innerHTML = '';
          return;
        }
        timer = setTimeout(() => searchDocs(searchInput.value.trim()), 300);
      });
      
      async function searchDocs(query) {
        try {
          const res = await fetch(`/api/notion?s=${encodeURIComponent(query)}`);
          if (res.status === 401) { window.location.href = '/admin/login'; return; }
          const data = await res.json();
          resultsEl.innerHTML = data.map(doc => `
            <div class="doc">
              <h3>${doc.title}</h3>
              <p>Last edited: ${new Date(doc.last_edited_time).toLocaleString()}</p>
              <button class="btn convert" data-id="${doc.id}">Convert</button>
            </div>
          `).join('');
          document.querySelectorAll('.convert').forEach(btn => btn.onclick = startConvert);
        } catch {
          alert('Search failed');
        }
      }
      
      async function startConvert(e) {
        const docId = e.target.getAttribute('data-id');
        overlay.classList.remove('hidden');
        try {
          const res = await fetch('/api/process-document', {
            method: 'POST', headers: {'Content-Type':'application/json'},
            body: JSON.stringify({ documentId: docId })
          });
          const { id } = await res.json();
          await pollStatus(id);
        } catch (err) {
          overlay.classList.add('hidden');
          alert(err.message || 'Conversion failed');
        }
      }
      
      async function pollStatus(id) {
        for (let i = 0; i < 80; i++) {
          const res = await fetch(`/api/status/${id}`);
          if (res.status === 401) { window.location.href = '/admin/login'; return; }
          const status = await res.json();
          progress.style.width = status.progress + '%';
          statusMessage.textContent = status.message;
          if (status.status === 'done') { window.location.href = `/admin/preview?id=${id}`; return; }
          if (status.status === 'error') { throw new Error(status.error || 'Processing failed'); }
          await new Promise(r => setTimeout(r, 1500));
        }
        throw new Error('Processing timed out');
      }
    });
  </script>
</body>
</html>