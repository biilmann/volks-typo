---
---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Publish Document</title>
    <link rel="stylesheet" href="/styles/global.css" />
    <style>
      .container {
        max-width: 800px;
        margin: 0 auto;
        padding: calc(var(--grid-unit) * 4);
      }
      #search {
        width: 100%;
        padding: calc(var(--grid-unit) * 1);
        border: 1px solid var(--color-border);
        border-radius: 4px;
        font-size: 1rem;
      }
      .result {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: calc(var(--grid-unit) * 2) 0;
        border-bottom: 1px solid var(--color-border);
      }
      .btn {
        padding: calc(var(--grid-unit) * 0.75) calc(var(--grid-unit) * 1.5);
        background: var(--color-accent);
        color: var(--color-white);
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-weight: bold;
        transition: opacity 0.2s ease;
      }
      .btn:hover {
        opacity: 0.85;
      }
      .overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
        display: flex;
        align-items: center;
        justify-content: center;
      }
      .overlay.hidden {
        display: none;
      }
      .overlay-content {
        background: var(--color-white);
        padding: calc(var(--grid-unit) * 4);
        border-radius: 8px;
        text-align: center;
        max-width: 400px;
        width: 100%;
      }
      #progress-bar-container {
        width: 100%;
        height: 12px;
        background: var(--color-surface);
        border-radius: 6px;
        margin: calc(var(--grid-unit) * 2) 0;
      }
      #progress-bar {
        height: 100%;
        background: var(--color-accent);
        width: 0%;
        border-radius: 6px;
        transition: width 0.3s ease;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <h1>Publish Document</h1>
      <input id="search" type="text" placeholder="Search Notion documents..." />
      <div id="results"></div>
    </div>
    <div id="overlay" class="overlay hidden">
      <div class="overlay-content">
        <h2>Processing...</h2>
        <div id="progress-bar-container"><div id="progress-bar"></div></div>
        <p id="status-message"></p>
      </div>
    </div>
    <script type="module" client:load>
      function debounce(fn, delay) {
        let timer;
        return (...args) => {
          clearTimeout(timer);
          timer = setTimeout(() => fn(...args), delay);
        };
      }

      const searchInput = document.getElementById('search');
      const resultsDiv = document.getElementById('results');
      const overlay = document.getElementById('overlay');
      const progressBar = document.getElementById('progress-bar');
      const statusMessage = document.getElementById('status-message');

      const searchDocuments = debounce(async () => {
        const query = searchInput.value.trim();
        if (!query) {
          resultsDiv.innerHTML = '';
          return;
        }
        try {
          const res = await fetch(`/.netlify/functions/notion?s=${encodeURIComponent(query)}`);
          if (res.status === 401) {
            window.location.href = '/admin/login';
            return;
          }
          const items = await res.json();
          resultsDiv.innerHTML = items.map(item => (
            `<div class="result">
              <div>
                <strong>${item.title}</strong><br/>
                <small>Last Edited: ${new Date(item.last_edited_time).toLocaleString()}</small>
              </div>
              <button class="btn" data-id="${item.id}">Convert</button>
            </div>`
          )).join('');
        } catch (e) {
          console.error(e);
        }
      }, 300);

      searchInput.addEventListener('input', searchDocuments);

      resultsDiv.addEventListener('click', async (e) => {
        if (e.target.matches('button[data-id]')) {
          const docId = e.target.getAttribute('data-id');
          overlay.classList.remove('hidden');
          try {
            const resp = await fetch('/.netlify/functions/process-document', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ documentId: docId }),
            });
            const { id } = await resp.json();
            await pollStatus(id);
          } catch (err) {
            alert('Processing failed.');
            overlay.classList.add('hidden');
          }
        }
      });

      async function pollStatus(documentId) {
        let attempts = 0;
        const maxAttempts = 80;
        while (attempts < maxAttempts) {
          const res = await fetch(`/.netlify/functions/status/${documentId}`);
          if (res.status === 401) {
            window.location.href = '/admin/login';
            return;
          }
          const status = await res.json();
          progressBar.style.width = `${status.progress}%`;
          statusMessage.textContent = status.message;
          if (status.status === 'done') {
            window.location.href = `/admin/preview?id=${documentId}`;
            return;
          }
          if (status.status === 'error') {
            throw new Error(status.error || 'Processing failed');
          }
          attempts++;
          await new Promise(resolve => setTimeout(resolve, 1500));
        }
        throw new Error('Processing timed out');
      }
    </script>
  </body>
</html>